--------------------------------------------------------------------------------
I1 cache:         32768 B, 64 B, 8-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         6291456 B, 64 B, 12-way associative
Command:          ./list_sort
Data file:        cachegrind.out.68266
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Thresholds:       0.1 100 100 100 100 100 100 100 100
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir      I1mr  ILmr  Dr      D1mr  DLmr  Dw      D1mw DLmw 
--------------------------------------------------------------------------------
740,995 1,199 1,173 200,368 2,570 2,087 108,656  807  742  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir     I1mr ILmr Dr     D1mr  DLmr Dw     D1mw DLmw  file:function
--------------------------------------------------------------------------------
75,767   39   39 21,501    11    6 13,825    0    0  /build/glibc-eX1tMB/glibc-2.31/stdio-common/vfprintf-internal.c:__vfprintf_internal
71,449   10   10 14,298 1,083  912     15    2    1  /build/glibc-eX1tMB/glibc-2.31/elf/dl-addr.c:_dl_addr
65,664    0    0 27,648     0    0 17,280    0    0  /media/shani/0FEA0DDE0FEA0DDE/jserv/Linux_2021/quiz2/common.h:cmpint
50,942    4    4 19,732     0    0 14,799    0    0  /media/shani/0FEA0DDE0FEA0DDE/jserv/Linux_2021/quiz2/list_sort.c:merge
43,130   10   10 10,146     0    0  6,632    2    0  /build/glibc-eX1tMB/glibc-2.31/stdlib/msort.c:msort_with_tmp.part.0
39,126    9    9  7,612     1    0  5,000   15   14  /build/glibc-eX1tMB/glibc-2.31/string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms
36,367   21   21  6,189     2    1  6,190  132  129  /build/glibc-eX1tMB/glibc-2.31/malloc/malloc.c:_int_malloc
35,294    6    6  7,829     2    1  5,632    0    0  /build/glibc-eX1tMB/glibc-2.31/libio/fileops.c:_IO_file_xsputn@@GLIBC_2.2.5
30,720    4    4  5,632     0    0  3,584    0    0  /media/shani/0FEA0DDE0FEA0DDE/jserv/Linux_2021/quiz2/common.h:getnum
25,025    5    5  4,848    37   37     77    2    2  /build/glibc-eX1tMB/glibc-2.31/elf/dl-tunables.c:__GI___tunables_init
23,372   15   15  7,762   191  137  3,654   12    4  /build/glibc-eX1tMB/glibc-2.31/elf/dl-lookup.c:do_lookup_x
20,594    8    8  5,853     0    0  2,567    0    0  /build/glibc-eX1tMB/glibc-2.31/malloc/malloc.c:_int_free
19,803   11   11  4,144    95   84  2,038    9    2  /build/glibc-eX1tMB/glibc-2.31/elf/dl-lookup.c:_dl_lookup_symbol_x
17,965   22   22  4,288   414  393  2,096  257  246  /build/glibc-eX1tMB/glibc-2.31/elf/../sysdeps/x86_64/dl-machine.h:_dl_relocate_object
14,404   11   11  5,389    10    0  2,577    0    0  /media/shani/0FEA0DDE0FEA0DDE/jserv/Linux_2021/quiz2/list_sort.c:main
13,018    6    6  6,616     0    0  3,312    0    0  /media/shani/0FEA0DDE0FEA0DDE/jserv/Linux_2021/quiz2/list_sort.c:list_sort
12,302    6    6  3,078     1    0  1,027    0    0  /build/glibc-eX1tMB/glibc-2.31/malloc/malloc.c:malloc
12,284    3    3    914     1    1    658    0    0  /build/glibc-eX1tMB/glibc-2.31/stdio-common/_itoa.c:_itoa_word
 9,728    3    3  1,024     1    1      0    0    0  /build/glibc-eX1tMB/glibc-2.31/string/../sysdeps/x86_64/multiarch/strchr-avx2.S:__strchrnul_avx2
 9,402   12   12  2,278   253  239    258    2    0  /build/glibc-eX1tMB/glibc-2.31/elf/do-rel.h:_dl_relocate_object
 8,956    1    1      0     0    0      0    0    0  /build/glibc-eX1tMB/glibc-2.31/string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__mempcpy_avx_unaligned_erms
 8,417    5    5  3,578     0    0  2,549    0    0  /media/shani/0FEA0DDE0FEA0DDE/jserv/Linux_2021/quiz2/list_sort.c:merge_final
 8,005   27   25  3,974    13    0     15    1    1  ???:???
 7,882    1    1  1,459     9    9      0    0    0  /build/glibc-eX1tMB/glibc-2.31/elf/dl-tunables.h:__GI___tunables_init
 7,695    3    3  3,076     1    1  1,284    8    7  /media/shani/0FEA0DDE0FEA0DDE/jserv/Linux_2021/quiz2/common.h:random_shuffle_array
 7,680    4    4  1,536     2    0  2,816    0    0  /build/glibc-eX1tMB/glibc-2.31/stdio-common/printf.c:printf
 6,656    2    2  3,072     0    0  1,280    0    0  /media/shani/0FEA0DDE0FEA0DDE/jserv/Linux_2021/quiz2/common.h:get_unsigned16
 5,632    1    1  3,072     0    0  2,048    0    0  /media/shani/0FEA0DDE0FEA0DDE/jserv/Linux_2021/quiz2/list.h:list_add_tail
 5,386    3    3  1,283     0    0      0    0    0  /build/glibc-eX1tMB/glibc-2.31/malloc/malloc.c:free
 4,885    6    6  1,627    40   27    554    3    1  /build/glibc-eX1tMB/glibc-2.31/elf/dl-lookup.c:check_match
 4,608    3    3  1,024     0    0    512    0    0  /build/glibc-eX1tMB/glibc-2.31/stdio-common/../libio/libioP.h:__vfprintf_internal
 4,608    0    0  2,560     0    0  1,536    0    0  /media/shani/0FEA0DDE0FEA0DDE/jserv/Linux_2021/quiz2/list.h:list_del
 4,415   41   41  1,085    34   25      0    0    0  /build/glibc-eX1tMB/glibc-2.31/string/../sysdeps/x86_64/strcmp.S:strcmp
 2,560    2    2      0     0    0  1,280    0    0  /build/glibc-eX1tMB/glibc-2.31/stdio-common/printf-parse.h:__vfprintf_internal
 1,682   19   19    561    25   23    216   18   17  /build/glibc-eX1tMB/glibc-2.31/elf/dl-version.c:_dl_check_map_versions
 1,304   37   36    298     3    3    139   11   11  /build/glibc-eX1tMB/glibc-2.31/elf/dl-load.c:_dl_map_object_from_fd
   998   67   67    267    30   19    106   14   14  /build/glibc-eX1tMB/glibc-2.31/elf/rtld.c:dl_main
   949   30   30    190     3    3     98    5    5  /build/glibc-eX1tMB/glibc-2.31/elf/dl-deps.c:_dl_map_object_deps
   768    1    1      0     0    0    130   35   34  /build/glibc-eX1tMB/glibc-2.31/malloc/malloc.c:ptmalloc_init.part.0
   758   10   10    111     6    6     24    0    0  /build/glibc-eX1tMB/glibc-2.31/string/../sysdeps/x86/cacheinfo.c:intel_check_word.isra.0

--------------------------------------------------------------------------------
-- Auto-annotated source: /media/shani/0FEA0DDE0FEA0DDE/jserv/Linux_2021/quiz2/common.h
--------------------------------------------------------------------------------
Ir     I1mr ILmr Dr     D1mr DLmr Dw     D1mw DLmw 

-- line 9 ----------------------------------------
     .    .    .      .    .    .      .    .    .  #define ARRAY_SIZE(x) (sizeof(x) / sizeof(x[0]))
     .    .    .      .    .    .      .    .    .  
     .    .    .      .    .    .      .    .    .  struct listitem {
     .    .    .      .    .    .      .    .    .      uint16_t i;
     .    .    .      .    .    .      .    .    .      struct list_head list;
     .    .    .      .    .    .      .    .    .  };
     .    .    .      .    .    .      .    .    .  
     .    .    .      .    .    .      .    .    .  static inline uint8_t getnum(void)
 1,024    1    1      0    0    0    512    0    0  {
     .    .    .      .    .    .      .    .    .      static uint16_t s1 = UINT16_C(2);
     .    .    .      .    .    .      .    .    .      static uint16_t s2 = UINT16_C(1);
     .    .    .      .    .    .      .    .    .      static uint16_t s3 = UINT16_C(1);
     .    .    .      .    .    .      .    .    .  
 4,608    1    1    512    0    0    512    0    0      s1 *= UINT16_C(171);
 6,656    0    0    512    0    0    512    0    0      s1 %= UINT16_C(30269);
     .    .    .      .    .    .      .    .    .  
 1,536    1    1    512    0    0    512    0    0      s2 *= UINT16_C(172);
 4,608    0    0    512    0    0    512    0    0      s2 %= UINT16_C(30307);
     .    .    .      .    .    .      .    .    .  
 1,536    1    1    512    0    0    512    0    0      s3 *= UINT16_C(170);
 6,656    0    0    512    0    0    512    0    0      s3 %= UINT16_C(30323);
     .    .    .      .    .    .      .    .    .  
 3,072    0    0  1,536    0    0      0    0    0      return s1 ^ s2 ^ s3;
 1,024    0    0  1,024    0    0      0    0    0  }
     .    .    .      .    .    .      .    .    .  
     .    .    .      .    .    .      .    .    .  static uint16_t get_unsigned16(void)
 1,024    1    1      0    0    0    256    0    0  {
   256    0    0      0    0    0    256    0    0      uint16_t x = 0;
     .    .    .      .    .    .      .    .    .      size_t i;
     .    .    .      .    .    .      .    .    .  
 2,560    1    1  1,280    0    0    256    0    0      for (i = 0; i < sizeof(x); i++) {
   512    0    0    512    0    0      0    0    0          x <<= 8;
 1,536    0    0    512    0    0    512    0    0          x |= getnum();
     .    .    .      .    .    .      .    .    .      }
     .    .    .      .    .    .      .    .    .  
   256    0    0    256    0    0      0    0    0      return x;
   512    0    0    512    0    0      0    0    0  }
     .    .    .      .    .    .      .    .    .  
     .    .    .      .    .    .      .    .    .  static inline int cmpint(const void *p1, const void *p2)
17,280    0    0      0    0    0 10,368    0    0  {
 6,912    0    0  3,456    0    0  3,456    0    0      const uint16_t *i1 = (const uint16_t *) p1;
 6,912    0    0  3,456    0    0  3,456    0    0      const uint16_t *i2 = (const uint16_t *) p2;
     .    .    .      .    .    .      .    .    .  
27,648    0    0 13,824    0    0      0    0    0      return *i1 - *i2;
 6,912    0    0  6,912    0    0      0    0    0  }
     .    .    .      .    .    .      .    .    .  
     .    .    .      .    .    .      .    .    .  static inline void random_shuffle_array(uint16_t *operations, uint16_t len)
     6    1    1      0    0    0      3    0    0  {
     .    .    .      .    .    .      .    .    .      uint16_t i;
     .    .    .      .    .    .      .    .    .      uint16_t j;
     .    .    .      .    .    .      .    .    .  
 1,541    1    1    770    0    0    257    0    0      for (i = 0; i < len; i++) {
     .    .    .      .    .    .      .    .    .          /* WARNING biased shuffling */
 2,048    1    1    256    0    0    512    1    0          j = get_unsigned16() % (i + 1);
 2,560    0    0  1,280    1    1    256    7    7          operations[i] = operations[j];
 1,536    0    0    768    0    0    256    0    0          operations[j] = i;
     .    .    .      .    .    .      .    .    .      }
     4    0    0      2    0    0      0    0    0  }
     .    .    .      .    .    .      .    .    .  
     .    .    .      .    .    .      .    .    .  #endif /* PRIVATE_COMMON_H */
--------------------------------------------------------------------------------
-- Auto-annotated source: /media/shani/0FEA0DDE0FEA0DDE/jserv/Linux_2021/quiz2/list.h
--------------------------------------------------------------------------------
Ir    I1mr ILmr Dr    D1mr DLmr Dw  D1mw DLmw 

-- line 31 ----------------------------------------
    .    .    .     .    .    .   .    .    .   */
    .    .    .     .    .    .   .    .    .  #define LIST_HEAD(head) struct list_head head = {&(head), &(head)}
    .    .    .     .    .    .   .    .    .  
    .    .    .     .    .    .   .    .    .  /**
    .    .    .     .    .    .   .    .    .   * INIT_LIST_HEAD() - Initialize empty list head
    .    .    .     .    .    .   .    .    .   * @head: pointer to list head
    .    .    .     .    .    .   .    .    .   */
    .    .    .     .    .    .   .    .    .  static inline void INIT_LIST_HEAD(struct list_head *head)
    3    0    0     0    0    0   2    0    0  {
    6    1    1     4    0    0   2    0    0      head->next = head; head->prev = head;
    3    0    0     2    0    0   0    0    0  }
    .    .    .     .    .    .   .    .    .  
    .    .    .     .    .    .   .    .    .  /**
    .    .    .     .    .    .   .    .    .   * list_add_tail() - Add a list node to the end of the list
    .    .    .     .    .    .   .    .    .   * @node: pointer to the new node
    .    .    .     .    .    .   .    .    .   * @head: pointer to the head of the list
    .    .    .     .    .    .   .    .    .   */
    .    .    .     .    .    .   .    .    .  static inline void list_add_tail(struct list_head *node, struct list_head *head)
1,024    0    0     0    0    0 768    0    0  {
  768    0    0   512    0    0 256    0    0      struct list_head *prev = head->prev;
    .    .    .     .    .    .   .    .    .  
  768    0    0   512    0    0 256    0    0      prev->next = node;
  768    0    0   512    0    0 256    0    0      node->next = head;
  768    1    1   512    0    0 256    0    0      node->prev = prev;
  768    0    0   512    0    0 256    0    0      head->prev = node;
  768    0    0   512    0    0   0    0    0  }
    .    .    .     .    .    .   .    .    .  
    .    .    .     .    .    .   .    .    .  /**
    .    .    .     .    .    .   .    .    .   * list_del() - Remove a list node from the list
    .    .    .     .    .    .   .    .    .   * @node: pointer to the node
    .    .    .     .    .    .   .    .    .   */
    .    .    .     .    .    .   .    .    .  static inline void list_del(struct list_head *node)
  768    0    0     0    0    0 512    0    0  {
1,536    0    0 1,024    0    0 512    0    0      struct list_head *next = node->next, *prev = node->prev;
1,536    0    0 1,024    0    0 512    0    0      next->prev = prev; prev->next = next;
  768    0    0   512    0    0   0    0    0  }
    .    .    .     .    .    .   .    .    .  
    .    .    .     .    .    .   .    .    .  /**
    .    .    .     .    .    .   .    .    .   * list_empty() - Check if list head has no nodes attached
    .    .    .     .    .    .   .    .    .   * @head: pointer to the head of the list
    .    .    .     .    .    .   .    .    .   */
    .    .    .     .    .    .   .    .    .  static inline int list_empty(const struct list_head *head)
    9    0    0     0    0    0   6    0    0  {
   15    0    0     9    0    0   0    0    0      return (head->next == head);
    6    0    0     6    0    0   0    0    0  }
    .    .    .     .    .    .   .    .    .  
    .    .    .     .    .    .   .    .    .  /**
    .    .    .     .    .    .   .    .    .   * list_is_singular() - Check if list head has exactly one node attached
    .    .    .     .    .    .   .    .    .   * @head: pointer to the head of the list
    .    .    .     .    .    .   .    .    .   */
    .    .    .     .    .    .   .    .    .  static inline int list_is_singular(const struct list_head *head)
    .    .    .     .    .    .   .    .    .  {
    .    .    .     .    .    .   .    .    .      return (!list_empty(head) && head->prev == head->next);
-- line 83 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /media/shani/0FEA0DDE0FEA0DDE/jserv/Linux_2021/quiz2/list_sort.c
--------------------------------------------------------------------------------
Ir     I1mr ILmr Dr    D1mr DLmr Dw    D1mw DLmw 

-- line 4 ----------------------------------------
     .    .    .     .    .    .     .    .    .  #include <stdio.h>
     .    .    .     .    .    .     .    .    .  #include "common.h"
     .    .    .     .    .    .     .    .    .  
     .    .    .     .    .    .     .    .    .  static uint16_t values[256];
     .    .    .     .    .    .     .    .    .  
     .    .    .     .    .    .     .    .    .  __attribute__((nonnull(1,2)))
     .    .    .     .    .    .     .    .    .  static struct list_head *merge(
     .    .    .     .    .    .     .    .    .                                struct list_head *a, struct list_head *b)
 2,286    0    0   254    0    0 1,016    0    0  {
   508    1    1     0    0    0   254    0    0        struct list_head *head, **tail = &head;
     .    .    .     .    .    .     .    .    .  
     .    .    .     .    .    .     .    .    .        for (;;) {
 1,475    0    0     0    0    0 1,475    0    0                struct listitem *item = NULL;
 8,850    0    0 4,425    0    0 2,950    0    0                uint16_t value_a = list_entry(a, __typeof__(*item), list)->i;
 8,850    0    0 4,425    0    0 2,950    0    0                uint16_t value_b = list_entry(b, __typeof__(*item), list)->i;
     .    .    .     .    .    .     .    .    .                /* if equal, take 'a' -- important for sort stability */
10,325    1    1     0    0    0 1,475    0    0                if (cmpint(&value_a, &value_b) <= 0) {
 2,244    0    0 1,496    0    0   748    0    0                        *tail = a;
 2,244    0    0   748    0    0   748    0    0                        tail = &a->next;
 2,244    0    0 1,496    0    0   748    0    0                        a = a->next;
 1,496    0    0   748    0    0     0    0    0                        if (!a) {
   411    1    1   274    0    0   137    0    0                                *tail = b;
   137    0    0     0    0    0     0    0    0                                break;
     .    .    .     .    .    .     .    .    .                        }
     .    .    .     .    .    .     .    .    .                } else {
 2,181    0    0 1,454    0    0   727    0    0                        *tail = b;
 2,181    0    0   727    0    0   727    0    0                        tail = &b->next;
 2,181    0    0 1,454    0    0   727    0    0                        b = b->next;
 1,454    0    0   727    0    0     0    0    0                        if (!b) {
   351    0    0   234    0    0   117    0    0                                *tail = a;
     .    .    .     .    .    .     .    .    .                                break;
     .    .    .     .    .    .     .    .    .                        }
     .    .    .     .    .    .     .    .    .                }
     .    .    .     .    .    .     .    .    .        }
   254    1    1   254    0    0     0    0    0        return head;
 1,270    0    0 1,016    0    0     0    0    0  }
     .    .    .     .    .    .     .    .    .  
     .    .    .     .    .    .     .    .    .  __attribute__((nonnull(1,2,3)))
     .    .    .     .    .    .     .    .    .  static void merge_final(struct list_head *head,
     .    .    .     .    .    .     .    .    .                        struct list_head *a, struct list_head *b)
    10    0    0     1    0    0     5    0    0  {
     2    1    1     1    0    0     1    0    0        struct list_head *tail = head;
     1    0    0     0    0    0     1    0    0        uint8_t count = 0;
     .    .    .     .    .    .     .    .    .  
     .    .    .     .    .    .     .    .    .        for (;;) {
   253    0    0     0    0    0   253    0    0                struct listitem *item = NULL;
 1,518    0    0   759    0    0   506    0    0                uint16_t value_a = list_entry(a, __typeof__(*item), list)->i;
 1,518    1    1   759    0    0   506    0    0                uint16_t value_b = list_entry(b, __typeof__(*item), list)->i;
     .    .    .     .    .    .     .    .    .                /* if equal, take 'a' -- important for sort stability */
 1,771    0    0     0    0    0   253    0    0                if (cmpint(&value_a, &value_b) <= 0) {
   384    0    0   256    0    0   128    0    0                        tail->next = a;
   384    0    0   256    0    0   128    0    0                        a->prev = tail;
   256    0    0   128    0    0   128    0    0                        tail = a;
   384    1    1   256    0    0   128    0    0                        a = a->next;
   256    0    0   128    0    0     0    0    0                        if (!a)
     1    0    0     0    0    0     0    0    0                                break;
     .    .    .     .    .    .     .    .    .                } else {
   375    0    0   250    0    0   125    0    0                        tail->next = b;
   375    0    0   250    0    0   125    0    0                        b->prev = tail;
   250    0    0   125    0    0   125    0    0                        tail = b;
   375    0    0   250    0    0   125    0    0                        b = b->next;
   250    1    1   125    0    0     0    0    0                        if (!b) {
     .    .    .     .    .    .     .    .    .                                b = a;
     .    .    .     .    .    .     .    .    .                                break;
     .    .    .     .    .    .     .    .    .                        }
     .    .    .     .    .    .     .    .    .                }
     .    .    .     .    .    .     .    .    .        }
     .    .    .     .    .    .     .    .    .  
     .    .    .     .    .    .     .    .    .        /* Finish linking remainder of list b on to tail */
     3    0    0     2    0    0     1    0    0        tail->next = b;
     .    .    .     .    .    .     .    .    .        do {
     .    .    .     .    .    .     .    .    .                //if (unlikely(!++count))
     9    0    0     6    0    0     0    0    0                if(!++count){
     .    .    .     .    .    .     .    .    .                        struct listitem *item = NULL;
     .    .    .     .    .    .     .    .    .                        uint16_t value_b = list_entry(b, __typeof__(*item), list)->i;
     .    .    .     .    .    .     .    .    .                        cmpint(&value_b, &value_b);
     .    .    .     .    .    .     .    .    .                }
     9    1    1     6    0    0     3    0    0                b->prev = tail;
     6    0    0     3    0    0     3    0    0                tail = b;
     9    0    0     6    0    0     3    0    0                b = b->next;
     6    0    0     3    0    0     0    0    0        } while (b);
     .    .    .     .    .    .     .    .    .  
     .    .    .     .    .    .     .    .    .        /* And the final links to make a circular doubly-linked list */
     3    0    0     2    0    0     1    0    0        tail->next = head;
     3    0    0     2    0    0     1    0    0        head->prev = tail;
     6    0    0     4    0    0     0    0    0  }
     .    .    .     .    .    .     .    .    .  
     .    .    .     .    .    .     .    .    .  __attribute__((nonnull(1)))
     .    .    .     .    .    .     .    .    .  void list_sort(struct list_head *head)
     8    2    2     1    0    0     3    0    0  {
     4    0    0     2    0    0     2    0    0        struct list_head *list = head->next, *pending = NULL;
     1    0    0     0    0    0     1    0    0        size_t count = 0;       /* Count of pending */
     .    .    .     .    .    .     .    .    .  
     4    0    0     3    0    0     0    0    0        if (list == head->prev) /* Zero or one elements */
     .    .    .     .    .    .     .    .    .                return;
     .    .    .     .    .    .     .    .    .  
     .    .    .     .    .    .     .    .    .        /* Convert to a null-terminated singly-linked list. */
     3    1    1     2    0    0     1    0    0        head->prev->next = NULL;
     .    .    .     .    .    .     .    .    .  
     .    .    .     .    .    .     .    .    .        do {
     .    .    .     .    .    .     .    .    .                size_t bits;
   512    0    0     0    0    0   256    0    0                struct list_head **tail = &pending;
     .    .    .     .    .    .     .    .    .  
     .    .    .     .    .    .     .    .    .                /* Find the least-significant clear bit in count */
 3,067    0    0 1,022    0    0   256    0    0                for (bits = count; bits & 1; bits >>= 1)
   765    0    0   510    0    0   255    0    0                        tail = &(*tail)->prev;
     .    .    .     .    .    .     .    .    .                /* Do the indicated merge */
     .    .    .     .    .    .     .    .    .                //if (likely(bits)) {
   512    0    0   256    0    0     0    0    0                if(bits){
 1,482    0    0   988    0    0   494    0    0                        struct list_head *a = *tail, *b = a->prev;
     .    .    .     .    .    .     .    .    .  
 1,482    0    0   494    0    0   494    0    0                        a = merge(b, a);
     .    .    .     .    .    .     .    .    .                        /* Install the merged result in place of the inputs */
   988    0    0   741    0    0   247    0    0                        a->prev = b->prev;
   741    0    0   494    0    0   247    0    0                        *tail = a;
     .    .    .     .    .    .     .    .    .                }
     .    .    .     .    .    .     .    .    .  
     .    .    .     .    .    .     .    .    .                /* Move one element from input list to pending */
   768    2    2   512    0    0   256    0    0                list->prev = pending;
   512    0    0   256    0    0   256    0    0                pending = list;
   768    0    0   512    0    0   256    0    0                list = list->next;
   512    0    0   256    0    0   256    0    0                pending->next = NULL;
   256    0    0   256    0    0     0    0    0                count++;
   512    0    0   256    0    0     0    0    0        } while (list);
     .    .    .     .    .    .     .    .    .  
     .    .    .     .    .    .     .    .    .        /* End of input; merge together all the pending lists. */
     2    0    0     1    0    0     1    0    0        list = pending;
     3    1    1     2    0    0     1    0    0        pending = pending->prev;
     7    0    0     0    0    0     0    0    0        for (;;) {
    24    0    0    16    0    0     8    0    0                struct list_head *next = pending->prev;
     .    .    .     .    .    .     .    .    .  
    16    0    0     8    0    0     0    0    0                if (!next)
     1    0    0     0    0    0     0    0    0                        break;
    42    0    0    14    0    0    14    0    0                list = merge(pending, list);
    14    0    0     7    0    0     7    0    0                pending = next;
     .    .    .     .    .    .     .    .    .        }
     .    .    .     .    .    .     .    .    .        /* The final merge, rebuilding prev links */
     7    0    0     3    0    0     1    0    0        merge_final(head, pending, list);
     5    0    0     4    0    0     0    0    0  }
     .    .    .     .    .    .     .    .    .  //EXPORT_SYMBOL(list_sort);
     .    .    .     .    .    .     .    .    .  
     .    .    .     .    .    .     .    .    .  
     .    .    .     .    .    .     .    .    .  int main(void)
     7    2    2     1    0    0     2    0    0  {
     .    .    .     .    .    .     .    .    .      struct list_head testlist;
     2    0    0     0    0    0     2    0    0      struct listitem *item = NULL, *is = NULL;
     .    .    .     .    .    .     .    .    .      size_t i;
     .    .    .     .    .    .     .    .    .  
     3    0    0     0    0    0     1    0    0      random_shuffle_array(values, (uint16_t) ARRAY_SIZE(values));
     .    .    .     .    .    .     .    .    .  
     3    0    0     0    0    0     1    0    0      INIT_LIST_HEAD(&testlist);
     .    .    .     .    .    .     .    .    .  
     5    1    1     0    0    0     1    0    0      assert(list_empty(&testlist));
     .    .    .     .    .    .     .    .    .  
   772    1    1   513    0    0     1    0    0      for (i = 0; i < ARRAY_SIZE(values); i++) {
   768    0    0     0    0    0   512    0    0          item = (struct listitem *) malloc(sizeof(*item));
   512    1    1   256    0    0     0    0    0          assert(item);
 1,536    0    0   768    9    0   256    0    0          item->i = values[i];
 1,536    0    0   256    0    0   256    0    0          list_add_tail(&item->list, &testlist);
     .    .    .     .    .    .     .    .    .      }
     .    .    .     .    .    .     .    .    .  
     5    0    0     0    0    0     1    0    0      assert(!list_empty(&testlist));
     .    .    .     .    .    .     .    .    .  
     5    1    1     0    0    0     1    0    0      qsort(values, ARRAY_SIZE(values), sizeof(values[0]), cmpint);
     3    0    0     0    0    0     1    0    0      list_sort(&testlist);
     .    .    .     .    .    .     .    .    .  
     1    1    1     0    0    0     1    0    0      i = 0;
 3,345    1    1 1,286    0    0   772    0    0      list_for_each_entry_safe (item, is, &testlist, list) {
 2,048    1    1 1,024    0    0     0    0    0          assert(item->i == values[i]);
 1,792    1    1   512    0    0   256    0    0                printf("%d ", item->i);
 1,024    0    0   256    0    0   256    0    0          list_del(&item->list);
   768    0    0   256    0    0   256    0    0          free(item);
   256    0    0   256    0    0     0    0    0          i++;
     .    .    .     .    .    .     .    .    .      }
     .    .    .     .    .    .     .    .    .  
     2    0    0     1    0    0     0    0    0      assert(i == ARRAY_SIZE(values));
     5    1    1     0    0    0     1    0    0      assert(list_empty(&testlist));
     .    .    .     .    .    .     .    .    .  
     1    0    0     0    0    0     0    0    0      return 0;
     5    0    0     4    1    0     0    0    0  }
--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  /build/glibc-eX1tMB/glibc-2.31/elf/../sysdeps/x86_64/dl-machine.h
  /build/glibc-eX1tMB/glibc-2.31/elf/dl-addr.c
  /build/glibc-eX1tMB/glibc-2.31/elf/dl-deps.c
  /build/glibc-eX1tMB/glibc-2.31/elf/dl-load.c
  /build/glibc-eX1tMB/glibc-2.31/elf/dl-lookup.c
  /build/glibc-eX1tMB/glibc-2.31/elf/dl-tunables.c
  /build/glibc-eX1tMB/glibc-2.31/elf/dl-tunables.h
  /build/glibc-eX1tMB/glibc-2.31/elf/dl-version.c
  /build/glibc-eX1tMB/glibc-2.31/elf/do-rel.h
  /build/glibc-eX1tMB/glibc-2.31/elf/rtld.c
  /build/glibc-eX1tMB/glibc-2.31/libio/fileops.c
  /build/glibc-eX1tMB/glibc-2.31/malloc/malloc.c
  /build/glibc-eX1tMB/glibc-2.31/stdio-common/../libio/libioP.h
  /build/glibc-eX1tMB/glibc-2.31/stdio-common/_itoa.c
  /build/glibc-eX1tMB/glibc-2.31/stdio-common/printf-parse.h
  /build/glibc-eX1tMB/glibc-2.31/stdio-common/printf.c
  /build/glibc-eX1tMB/glibc-2.31/stdio-common/vfprintf-internal.c
  /build/glibc-eX1tMB/glibc-2.31/stdlib/msort.c
  /build/glibc-eX1tMB/glibc-2.31/string/../sysdeps/x86/cacheinfo.c
  /build/glibc-eX1tMB/glibc-2.31/string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S
  /build/glibc-eX1tMB/glibc-2.31/string/../sysdeps/x86_64/multiarch/strchr-avx2.S
  /build/glibc-eX1tMB/glibc-2.31/string/../sysdeps/x86_64/strcmp.S

--------------------------------------------------------------------------------
Ir      I1mr ILmr Dr     D1mr DLmr Dw     D1mw DLmw 
--------------------------------------------------------------------------------
207,798   37   37 80,396   11    1 50,259    8    7  events annotated